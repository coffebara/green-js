정규 표현식
    정규 표현식: 특정 패턴을 사용해 문자열을 표현하는 언어
    예) 온라인 쇼핑몰에서 물건을 주문할 때 입력한 전화번호가 숫자로만 되어 있는지 체크할 수 있고,
    'xxxxxx-xxxx'와 가틍ㄴ 패턴으로 이루어져 있는지 체크할 수도 있다.
    '패턴=규칙'이라고 생각해도 된다.
문자열을 검색하거나 문자열에서 특정 문자를 치환할 때도 복잡한 조건문 없이 정규 표현식을 사용하면 편리하다.
RegExp 객체를 사용하거나 슬래시(/)를 사용해 표현식으로 작성
정규 표현식은 '패턴'과 '플래그'로 구성.
플래그 옵션 패턴과 플래그 사이에는 공백이 없다.
기본형 패턴[플래그]

RegExp 객체의 메서드
 정규식.test(문자열)     일치하면 true, 없으면 false
 정규식.exec(문자열)     일치하는 부분문자열이 있다면 결과값을 배열형태로, 없으면 null을 반환

 문자열 메서드 중 정규 표현식과 함께 사용하는 메서드
 match(정규식)  일치하는 부분을 찾습니다.
 replace(정규식, 바꿀문자열) 정규표현식에 맞는 부분 문자열을 찾아서 새로운 문자열을 바꿉니다.

 ^  문자열의 시작
 $  문자열의 종료
 .  임의의 한 문자 (문자의 종류 가리지 않음) 단, \ 는 넣을 수 없음
 * 앞 문자가 없을 수도 무한정 많을 수도 있음
 + 앞 문자가 하나 이상
 ? 앞 문자가 없거나 하나있음
 [] 문자의 집합이나 범위를 나타내며 두 문자 사이는 - 기호로 범위를 나타낸다
 [] 내에서 ^가 선행하여 존재하면 not을 나타낸다.
 {} 횟수 또는 범위를 나타낸다.
 () 소괄호 안의 문자를 하나의 문자로 인식
 | 패턴 안에서 or 연산을 수행할 때 사용

 반복검색하기
 { } 기호는 반복해서 체크하라고 알려주는 기호.
 반복 횟수를 지정하거나 최소 반복 횟수, 최대 반복 횟수를 지정할 수 있다.
 패턴{n} 패턴이 n번 반복되는 것을 찾습니다
 패턴{n,} 패턴이 최소 n번 반복되는 것을 찾습니다
 패턴{m,n} 패턴이 최소 m번 이상, 최대 n번이하 반복되는 것을 찾습니다

 i는 플래그(flag) 중 하나로, 이 경우에는 'ignore case' 플래그입니다.
 대소문자를 구분하지 않고, 검색하도록 정규표현식에 지시합니다

 i플래그를 사용하면  hello와 HELLO 모두 정규 표현식에 매치되는 것을 확인할 수 있다

 정규 표현식의 플래그
 플래그는 문자열을 검색할 때 사용하는 옵션과 비슷하다고 생각하자
 i 영문자의 대소문자 구분하지 않고 검색
 g 패턴과 일치하는 것을 모두 찾습니다 g패턴이 없다면 일치하는 패턴중 첫 번째 패턴만 반환한다
 m 문자열의 행이 바뀌어도 검색합니다

 숫자 클래스 \d \d 숫자가 아닌 문자
 공백 클래스 \s \S 공백이 아닌 문자
 단어 클래스 \w \W 단어에 들어가지 않는 모든 문자

 문자 클래스를 사용하면 문자인지, 숫자인지, 혹은 공백 등을 체크할 수 있다.

 <script>
        // let regexp = /\d{3}/;
        // let str = "ES2015 is powerful!"; 
        // let hello = "Hello, everyone.";
        // console.log(regexp.test("Hello")); // false
        // console.log(regexp.test("123")); // ture
        // console.log(regexp.test("1234")); // true
        // console.log(regexp.test("1293")); // true
        // console.log(regexp.test("123!")); // ture
        // console.log(str.match(/ES\d/)); // (1) ['ES2', index: 0, input: 'ES2015 is powerful!', groups: undefined]
        // console.log(str.match(/ES\d\d\d\d/)); // (1) ['ES2015', index: 0, input: 'ES2015 is powerful!', groups: undefined]
        // console.log(/^H/.test(hello)); // true
        // console.log(/^h/.test(hello)); // false
        // console.log("ES2015".match(/[^0-9]/g)); // (2) ['E', 'S']
        // console.log(/one.$/.test(hello)); // true
        // console.log(/e.$/.test(hello)); // true
        // console.log(/one$/.test(hello)); // false
        
        // 반복 검색하기
        // {   } 기호는 반복해서 체크하라고 알려주는 기호
        // 반복횟수를 지정하거나 최소 반복 횟수, 최대 반복 횟수를 지정할 수 있다
        // 패턴{n} 패턴이 n번 반복되는 것을 찾습니다
        // 패턴{n,} 패턴이 최소 n번 이상 반복되는 것을 찾습니다
        // 패턴{m,n} 패턴이 최소 m번이상, 최대 n번 이하로 반복되는 것을 찾습니다.

        // let str2 = "Ooooops"
        // console.log(str2.match(/o{2}/)); // ['oo', index: 1, input: 'Ooooops', groups: undefined]
        // console.log(str2.match(/o{2,}/)); // ['oooo', index: 1, input: 'Ooooops', groups: undefined]
        // console.log(str2.match(/o{2,4}/i)); // ['Oooo', index: 0, input: 'Ooooops', groups: undefined]
        // i는 플래그(flag) 중 하나로, 이 경우에는 'ignore case' 플래그입니다.
        // 대소문자를 구분하지 않고, 검색하도록 정규표현식에 지시합니다

        let str3 = "Hello, World!";
        let str4 = "HELLO, WORLD!";

        regex = /hello/i;
        console.log(str3.match(regex)); // ['Hello', index: 0, input: 'Hello, World!', groups: undefined]
        console.log(str4.match(regex)); // ['HELLO', index: 0, input: 'HELLO, WORLD!', groups: undefined]
        // i플래그 사용 시 Hello와 HELLO 모두 정규 표현식에 매치되는 것을 확인할 수 있습니다

        // 정규표현식의 플래그
        // 플래그는 문자열을 검색할 때 사용하는 옵션과 비슷하다고 생각하자
        // i : 영문자의 대소문자 구분하지 않고 검색
        // g : 패턴과 일치하는 것을 모두 찾고, g패턴이 없다면 일치하는 패턴 중 첫번째 패턴만 반환
        // m : 문자열의 행이 바뀌어도 검색합니다.
    </script>